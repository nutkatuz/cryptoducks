// ProtectedRoute.js, чтобы защитить роуты.
// этот компонент принимает другой компонент в качестве пропса
// он также может взять неограниченное число пропсов и передать их новому компоненту
import React from "react";
import { Route, Redirect } from "react-router-dom";

const ProtectedRoute = ({ component: Component, ...props }) => {
// Для получения компонентов, переданных через пропс component, HOC-компонент ProtectedRoute использует деструктуризацию. Пропсы пробрасываются в него также при помощи деструктуризации. Это значит, что данные могут поступать от родителя к HOC-компоненту, который потом будет использован повторно для создания любых новых компонентов. 
  return (
    <Route>
      {() =>
        props.loggedIn ? <Component {...props} /> : <Redirect to="./login" />
      }{" "}
    </Route>
  );
};

export default ProtectedRoute;


// HOC-компонент ProtectedRoute возвращает компонент Route. Если значение loggedIn — true, Route либо отрисует компонент, который передан HOC-компоненту как пропс, включая переданные пропсы, либо вернёт компонент Redirect и переадресует пользователя на страницу авторизации.